       SUBROUTINE u2_recommender_v4(Action, InData, OutData, ErrText )
* ---------------------------------------------------------------------------
*  @@Name        : u2_recommender_v4
*  @@Description : Simply recommend books (fourth version)
*  @@Version     : 1.0
* ---------------------------------------------------------------------------
*  Brief Description
*  -----------------
*  @@INFO {
*     The python program runs in the background (via START_RECOMMENDER) and
*     acts as an http server so as to keep the details in memory.
*  }
* ---------------------------------------------------------------------------
*  Warnings
*  --------
*
* ---------------------------------------------------------------------------
*  Modification History
*  --------------------
*  @@Log
* ---------------------------------------------------------------------------
* Keywords
* --------
*
* --------------------------------------------------------------------------
* To Do List
* ----------
*
* --------------------------------------------------------------------------
$IFDEF UNIVERSE
$OPTIONS PICK
$INCLUDE UNIVERSE.INCLUDE UDO.H
$ENDIF

$INCLUDE books.inc u2_recommender.h
       HostName = "localhost"
       Port = 10009
       ConnectionTimeout = 30000
       Begin Case
          Case Action = RECOMMEND_ACTION.BUILD
              GoSub DoBuild
          Case Action = RECOMMEND_ACTION.ORDER
              GoSub DoAdd
          Case Action = RECOMMEND_ACTION.RECOMMEND
              GoSub DoRecommend
          Case Action = RECOMMEND_ACTION.CLEAR
              GoSub DoClose
       End Case
       Return       
* --------------------------------------------------------------------------
* DoAdd
* --------------------------------------------------------------------------
DoAdd:
       Pkt = '{"action":"add","orderId" : "' : InData<1>:'"}'
       GoSub CallServer
      
       RETURN

* --------------------------------------------------------------------------
* DoBuild
* --------------------------------------------------------------------------
DoBuild:
       Pkt = '{"action":"build"}'
       GoSub CallServer
      
       RETURN
* --------------------------------------------------------------------------
* DoClose
* --------------------------------------------------------------------------
DoClose:
       Pkt = '{"action":"close"}'
       GoSub CallServer
      
       RETURN

* --------------------------------------------------------------------------
* DoRecommend
* --------------------------------------------------------------------------
DoRecommend:
       TitleId = InData<1>
       ClientId = InData<2>       
       Limit = InData<3> + 0
       NoWeight = InData<4> + 0
       
       Pkt = '{"action":"recommend"'
       Pkt := ',"titleId" : "' : TitleId:'"'
       Pkt := ',"clientId" : "' : ClientId: '"'
       Pkt := ',"limit" : "': Limit:'"'
       Pkt := ',"noWeight" : "': NoWeight:'"}'
       GoSub CallServer
       
       * this returns a json array of the format:
       * [{'counter':n,'titleId':n}..]
       
       If OutData <> '' Then
          BookList = ''
          BookCounts = ''
          NoBooks = 0
          
          Ok = UDORead(OutData, UDOFORMAT_JSON,hResult)
          Ok = UDOArrayGetSize(hResult, size)
          For This = 1 To size
             Ok = UDOArrayGetItem(hResult, This, hPair, T)
             Ok = UDOGetProperty(hPair,"titleId", titleId, T)
             Ok = UDOGetProperty(hPair,"counter", counter, T)
             NoBooks += 1
             BookList<NoBooks> = titleId
             BookCounts<NoBooks> = counter
          Next
          Ok = UDOFree(hResult)
          OutData = Lower(BookList):@FM:Lower(BookCounts)
       End
       
       RETURN

* --------------------------------------------------------------------------
* CallServer
* --------------------------------------------------------------------------
CallServer:
       HTTPHeaders = 'Content-Type':@VM:"text/json"
       HTTPHeaders<-1> = 'User-Agent':@VM:'Rocket UniVerse'

       URL = "http://localhost:10009"
       Ok = setHTTPDefault("VERSION","1.1")
       
       ReturnCode = createRequest(URL, "POST", hRequest)
       Begin Case
          Case ReturnCode = 0
          Case ReturnCode = 1
             ErrText = "createRequest : Invalid URL (Syntactically)."
          Case ReturnCode = 2
             ErrText = "createRequest: Invalid method"
          Case 1
             ErrText =  "createRequest: failed ":ReturnCode
       End Case
       If ErrText <> '' Then Return
       
       ReturnCode = submitRequest(hRequest,0,Pkt,ResponseHeaders,ResponseData,HTTPStatus)
       Begin Case
          Case ReturnCode = 0
          Case ReturnCode = 1
             ErrText = "submitRequest: Invalid request handle."
          Case ReturnCode =2
             ErrText = "submitRequest: Timed out."
          Case ReturnCode = 3
             ErrText = "submitRequest: Network Error."
          Case 1
             ErrText = "submitRequest : Error :": ReturnCode
       End Case
       If ErrText <> '' Then Return
       
       OutData = ResponseData
       
       Return
       

