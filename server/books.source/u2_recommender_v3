       SUBROUTINE u2_recommender_v3(Action, InData, OutData, ErrText )
* ---------------------------------------------------------------------------
*  @@Name        : u2_recommender_v3
*  @@Description : Simply recommend books (third version)
*  @@Version     : 1.0
* ---------------------------------------------------------------------------
*  Brief Description
*  -----------------
*  @@INFO {
*     This now integrates into Python. 
*     The python program runs in the background (via START_RECOMMENDER) and
*     acts as a socket listener so as to keep the details in memory.
*  }
* ---------------------------------------------------------------------------
*  Warnings
*  --------
*
* ---------------------------------------------------------------------------
*  Modification History
*  --------------------
*  @@Log
* ---------------------------------------------------------------------------
* Keywords
* --------
*
* --------------------------------------------------------------------------
* To Do List
* ----------
*
* --------------------------------------------------------------------------
$IFDEF UNIVERSE
$OPTIONS PICK
$INCLUDE UNIVERSE.INCLUDE UDO.H
$ENDIF

$INCLUDE books.inc u2_recommender.h
       HostName = "localhost"
       Port = 10009
       ConnectionTimeout = 30000
       Begin Case
          Case Action = RECOMMEND_ACTION.BUILD
              GoSub DoBuild
          Case Action = RECOMMEND_ACTION.ORDER
              GoSub DoAdd
          Case Action = RECOMMEND_ACTION.RECOMMEND
              GoSub DoRecommend
          Case Action = RECOMMEND_ACTION.CLEAR
              GoSub DoClose
       End Case
       Return       
* --------------------------------------------------------------------------
* DoAdd
* --------------------------------------------------------------------------
DoAdd:
       Pkt = '{"action":"add","orderId" : "' : InData<1>:'"}'
       GoSub CallServer
      
       RETURN

* --------------------------------------------------------------------------
* DoBuild
* --------------------------------------------------------------------------
DoBuild:
       Pkt = '{"action":"build"}'
       GoSub CallServer
      
       RETURN
* --------------------------------------------------------------------------
* DoClose
* --------------------------------------------------------------------------
DoClose:
       Pkt = '{"action":"close"}'
       GoSub CallServer
      
       RETURN

* --------------------------------------------------------------------------
* DoRecommend
* --------------------------------------------------------------------------
DoRecommend:
       TitleId = InData<1>
       ClientId = InData<2>       
       Limit = InData<3> + 0
       NoWeight = InData<4> + 0
       
       Pkt = '{"action":"recommend"'
       Pkt := ',"titleId" : "' : TitleId:'"'
       Pkt := ',"clientId" : "' : ClientId: '"'
       Pkt := ',"limit" : "': Limit:'"'
       Pkt := ',"noWeight" : "': NoWeight:'"}'
       GoSub CallServer
       
       * this returns a json array of the format:
       * [{'counter':n,'titleId':n}..]
       
       If OutData <> '' Then
          BookList = ''
          BookCounts = ''
          NoBooks = 0
          
          Ok = UDORead(OutData, UDOFORMAT_JSON,hResult)
          Ok = UDOArrayGetSize(hResult, size)
          For This = 1 To size
             Ok = UDOArrayGetItem(hResult, This, hPair, T)
             Ok = UDOGetProperty(hPair,"titleId", titleId, T)
             Ok = UDOGetProperty(hPair,"counter", counter, T)
             NoBooks += 1
             BookList<NoBooks> = titleId
             BookCounts<NoBooks> = counter
          Next
          Ok = UDOFree(hResult)
          OutData = Lower(BookList):@FM:Lower(BookCounts)
       End
       
       RETURN

* --------------------------------------------------------------------------
* CallServer
* --------------------------------------------------------------------------
CallServer:
       Result = openSocket(HostName, Port, 1, ConnectionTimeout, Connection)
        
       If Result <> 0 Then
          ErrText<-1> = "Cannot open connection to ":HostName:" ":Port
          Ok = getSocketErrorMessage(Result, errMsg)
          ErrText<-1> = errMsg
          Return
       End

   !    Pkt = Action:InData
       BytesToSend = Len(Pkt)
       SocketError = writeSocket(Connection, Pkt, 0, 1, SentBytes)
       If SocketError <> 0 Then
          Ok = getSocketErrorMessage(SocketError, SocketErrorText)
          ErrText = "Socket error" : @FM : SocketErrorText
       End
         
       Pkt = ''
       TimeNow = Time()
     
! Get response
       Loop                        
          GoSub ReadSegment
        
          If SocketError Then
             ErrText = "Socket Error": @FM : SocketError
             Return
          End
        
          Pkt := PktBit
       Until (Pkt <> '' ) or ((Time() - TimeNow) > ConnectionTimeout) Do
       Repeat
     
     
       OutData = Pkt
       
       Ok = closeSocket(Connection)
     
       RETURN
     
* --------------------------------------------------------------------------
* ReadSegment
* --------------------------------------------------------------------------
ReadSegment:
       BytesRead = 0
       PktBit = ''
       ExpectedLength = 0
       SocketError = readSocket(Connection, PktBit, ExpectedLength, ConnectionTimeout, 0, BytesRead)
       If SocketError Then
          Ok = getSocketErrorMessage(SocketError, SocketErrorText)
          If SocketErrorText <> '' Then
             SocketError = SocketError : ' ':SocketErrorText
          End
       End     
       Return
