! Tests for the recommendations
$INCLUDE books.inc U2_ORDERS.h
$INCLUDE books.inc U2_BOOKS.h
$INCLUDE books.inc u2_recommender.h

GoSub Init
GoSub ShouldBuildAndRecommend
GoSub ShouldAddAndRecommend
GoSub ShouldNotAddTwiceForSameClient
GoSub ShouldApplyWeighting
GoSub ShouldFilterMyChoices

GoSub WrapUp

STOP

Init:
  Open 'U2_ORDERS' To U2_ORDERS Else
     Error 'Cannot open U2_ORDERS'
     STOP
  End
  
  * Make sure the recommender is running
  * Note SHOULD NOT be running before the script (or the build will use the
  *      real U2_ORDERS and not the profile mock)
  
  * If you want to do it from another session..
  * CRT "Waiting to start Recommender"
  * INPUT OK
  
  * If you want to run it as a phantom
  Cmd = 'PHANTOM RUNPY books.pysrc u2_recommender_v3'
  Perform Cmd
  Wait 2
  
  Return

* --------------------------------------------------------------------------
* CallSub
* --------------------------------------------------------------------------
CallSub:
  OutData = ''
  ErrText = ''
  Call u2_recommender_v3( Action, InData, OutData, ErrText)
Return

* --------------------------------------------------------------------------
* ShouldBuildAndRecommend
* --------------------------------------------------------------------------
ShouldBuildAndRecommend:

Announce 'Should build and recommend'

* add three orders that include the same title

OrderRec = ''
OrderRec<U2_ORDERS.CLIENT_ID> = 1
OrderRec<U2_ORDERS.BOOK_ID> = 1:@VM:2:@VM:3
Write OrderRec On U2_ORDERS, 1

OrderRec = ''
OrderRec<U2_ORDERS.CLIENT_ID> = 2
OrderRec<U2_ORDERS.BOOK_ID> = 1:@VM:3:@VM:4
Write OrderRec On U2_ORDERS, 2

OrderRec = ''
OrderRec<U2_ORDERS.CLIENT_ID> = 3
OrderRec<U2_ORDERS.BOOK_ID> = 1:@VM:2:@VM:5
Write OrderRec On U2_ORDERS, 3

Action = RECOMMEND_ACTION.BUILD
InData = ''
GoSub CallSub
AssertEmpty "There should be no error", ErrText

Action = RECOMMEND_ACTION.RECOMMEND
InData = 1
InData<4> = 1
GoSub CallSub
* we should have 2 (x2), 3 (x2), 4 and 5
AssertFull "Should have results", OutData
AssertIs "Top should be 3", OutData<1,1>,3
AssertIs '3 should have 2 counts', OutData<2,1>, 2

AssertIs "Equal should be 2", OutData<1,2>,2
AssertIs '2 should have 2 counts', OutData<2,2>, 2

AssertIs "Should have 5", OutData<1,3>,5
AssertIs '5 should have 1 count', OutData<2,3>, 1

AssertIs "Should have 4", OutData<1,4>,4
AssertIs '4 should have 1 count', OutData<2,4>, 1

Return

* --------------------------------------------------------------------------
* ShouldAddAndRecommend
* --------------------------------------------------------------------------
ShouldAddAndRecommend:

Announce 'Should add and recommend'

* add another order

OrderRec = ''
OrderRec<U2_ORDERS.CLIENT_ID> = 4
OrderRec<U2_ORDERS.BOOK_ID> = 1:@VM:2:@VM:3
Write OrderRec On U2_ORDERS, 4

Action = RECOMMEND_ACTION.ORDER
InData = 4
GoSub CallSub
AssertEmpty "There should be no error", ErrText

Action = RECOMMEND_ACTION.RECOMMEND
InData = 1
InData<4> = 1
GoSub CallSub
* we should have 2 (x2), 3 (x2), 4 and 5
AssertFull "Should have results", OutData
AssertIs "Top should be 3", OutData<1,1>,3
AssertIs '3 should have 3 counts', OutData<2,1>, 3

AssertIs "Equal should be 2", OutData<1,2>,2
AssertIs '2 should have 3 counts', OutData<2,2>, 3

Return

* --------------------------------------------------------------------------
* ShouldNotAddTwiceForSameClient
* --------------------------------------------------------------------------
ShouldNotAddTwiceForSameClient:

Announce 'Should not add twice for the same client'

* add another order

OrderRec = ''
OrderRec<U2_ORDERS.CLIENT_ID> = 4
OrderRec<U2_ORDERS.BOOK_ID> = 3
Write OrderRec On U2_ORDERS, 5

Action = RECOMMEND_ACTION.ORDER
InData = 5
GoSub CallSub
AssertEmpty "There should be no error", ErrText

Action = RECOMMEND_ACTION.RECOMMEND
InData = 1
InData<4> = 1
GoSub CallSub
* we should have 2 (x2), 3 (x2), 4 and 5
AssertFull "Should have results", OutData
AssertIs "Top should be 3", OutData<1,1>,3
AssertIs '3 should still have 3 counts', OutData<2,1>, 3


Return

* --------------------------------------------------------------------------
* ShouldApplyWeighting
* --------------------------------------------------------------------------
ShouldApplyWeighting:

Announce 'Should apply weightings'

Action = RECOMMEND_ACTION.RECOMMEND
InData = 1
GoSub CallSub
* 2 has the same author and genre 3x3 
AssertFull "Should have results", OutData
AssertIs "Top should now be 2", OutData<1,1>,2
AssertIs '2 should have 9 counts', OutData<2,1>, 9

Return

* --------------------------------------------------------------------------
* ShouldFilterMyChoices
* --------------------------------------------------------------------------
ShouldFilterMyChoices:

Announce 'Should filter what I have bought'

Action = RECOMMEND_ACTION.RECOMMEND
InData = 1
InData<2> = 3
InData<4> = 1

GoSub CallSub
* should not have 2 or 5
AssertFull "Should have results", OutData
AssertHasNot "Should not have 2", OutData<1>, 2
AssertHasNot "Should not have 5", OutData<1>, 5
AssertHas "Should still have 3", OutData<1>, 3

Return

* --------------------------------------------------------------------------
* WrapUp
* --------------------------------------------------------------------------
WrapUp:
   Action = RECOMMEND_ACTION.CLEAR
   InData = ''
   GoSub CallSub
   
Return

